{"version":3,"sources":["components/QueueList.js","App.js","reportWebVitals.js","index.js"],"names":["QUEUE_DATA","queues","styles","table","tableHeader","tr","td","dates","QueueList","props","handleIntervalChange","event","setState","intervalSec","target","value","loadDataInterval","interval","state","loadingSeq","clearInterval","setInterval","loadData","loading","storage","localStorage","getItem","JSON","parse","Object","keys","forEach","queue","loadDates","history","axios","get","then","res","getQueues","data","item","text","catch","err","console","error","deleteHistory","removeItem","alert","loadingInterval","bind","processedData","matchAll","date","Date","Array","from","match","current","color","prev","length","diff","valueShow","unshift","name","setItem","stringify","map","q","this","border","style","dt","moment","format","title","getTime","onClick","disabled","type","onChange","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAMMA,EAAa,aAEfC,EAAS,GAEPC,EAAS,CACbC,MAAO,CACL,UAAa,UAEfC,YAAa,CACXC,GAAI,CAAE,SAAY,QAAS,WAAc,QACzCC,GAAI,CAAE,SAAY,SAClBC,MAAO,CACLD,GAAI,CAAE,SAAY,QAAS,QAAW,QAAS,MAAS,YAoL/CE,E,kDA7Kb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2ERC,qBAAuB,SAACC,GACtB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA7EzB,EAgFnBC,iBAAmB,SAACL,GAClB,IAAIM,EAAW,EAAKC,MAAMD,SACtB,EAAKC,MAAMC,WACbC,cAAcH,IAEdA,EAAWI,YAAY,EAAKC,SAAmC,IAAzB,EAAKJ,MAAML,aACjD,EAAKD,SAAS,CAAEK,cAElB,EAAKL,SAAS,CAAEO,YAAa,EAAKD,MAAMC,cAxFvB,EA2FnBG,SAAW,WACT,EAAKV,SAAS,CAAEW,SAAS,IACzB,IAAIC,EAAUC,aAAaC,QAAQ1B,GAC/BwB,GACF,EAAKZ,SAAS,CACZX,OAAQ0B,KAAKC,MAAMJ,KAClB,WACDK,OAAOC,KAAK,EAAKZ,MAAMjB,QAAQ8B,SAAQ,SAAAC,GACrC,EAAKC,UAAU,EAAKf,MAAMjB,OAAO+B,GAAOE,eAK9CC,IAAMC,IA7HO,+CA8HVC,MAAK,SAAAC,GACJ,EAAKC,UAAUD,EAAIE,KAAKC,KAAK,GAAGC,KAAM,EAAKxB,MAAMjB,QACjD,EAAKW,SAAS,CAAEW,SAAS,OACxBoB,OAAM,SAAAC,GACPC,QAAQC,MAAMF,GACd,EAAKhC,SAAS,CAAEW,SAAS,QA9GZ,EAkHnBwB,cAAgB,WACdtB,aAAauB,WAAWhD,GACxB,EAAKY,SAAS,CACZX,OAAQ,KAEVgD,MAAM,qBArHN,EAAK/B,MAAQ,CACXX,MAAO,GACPN,OAAQ,GACRsB,SAAS,EACTV,YAAa,GACbqC,iBAAiB,EACjBjC,SAAU,MAEZ,EAAKK,SAAW,EAAKA,SAAS6B,KAAd,gBAChB,EAAKzC,qBAAuB,EAAKA,qBAAqByC,KAA1B,gBAC5B,EAAKnC,iBAAmB,EAAKA,iBAAiBmC,KAAtB,gBACxB,EAAKJ,cAAgB,EAAKA,cAAcI,KAAnB,gBACrB,EAAKlB,UAAY,EAAKA,UAAUkB,KAAf,gBAdA,E,6CAiBnB,SAAUX,GAAO,IAAD,OACVY,EAAgBZ,EAAKa,SAAS,8EAG9BC,EAAO,IAAIC,KAEfC,MAAMC,KAAKL,GAAerB,SAAQ,SAAA2B,GAAU,IAAD,EAGrCxB,GAAU,WADdjC,EAAS,EAAKiB,MAAMjB,QACCyD,EAAM,WAAb,eAAkBxB,UAAW,GAEvCyB,EAAU,CACZ5C,MAAO2C,EAAM,GACbE,MAAOF,EAAM,GACbJ,QAGEO,EAAO3B,EAAQ4B,OAAS,EAAI5B,EAAQ,GAAK,KAEzC2B,GACFF,EAAQI,KAAOJ,EAAQ5C,MAAQ8C,EAAK9C,MAChC8C,EAAK9C,MAAQ4C,EAAQ5C,MACvB4C,EAAQK,UAAR,UAAuBL,EAAQ5C,MAA/B,QACS8C,EAAK9C,MAAQ4C,EAAQ5C,MAC9B4C,EAAQK,UAAR,UAAuBL,EAAQ5C,MAA/B,QAEA4C,EAAQK,UAAR,UAAuBL,EAAQ5C,MAA/B,UAGF4C,EAAQK,UAAYL,EAAQ5C,MAC5B4C,EAAQI,KAAO,OAGjB7B,EAAQ+B,QACNN,GAGF,EAAK1B,UAAUC,GAEfjC,EAAOyD,EAAM,IAAM,CACjBQ,KAAMR,EAAM,GACZxB,WAEF,EAAKtB,SAAS,CAAEX,WAChBwB,aAAa0C,QAAQnE,EAAY2B,KAAKyC,UAAUnE,S,uBAIpD,SAAUiC,GACR,IAAI3B,EAAQ2B,EAAQmC,KAAI,SAAAC,GACtB,OAAOA,EAAEhB,QAEXiB,KAAK3D,SAAS,CAAEL,Y,+BAGlB,WACEgE,KAAKjD,a,oBAiDP,WAAU,IAAD,OACP,OACE,gCACGO,OAAOC,KAAKyC,KAAKrD,MAAMjB,QAAQ6D,OAAS,EACvC,wBAAOU,OAAO,IAAIC,MAAOvE,EAAOC,MAAhC,UACE,gCACE,qBAAIsE,MAAOvE,EAAOE,YAAYC,GAA9B,UACE,oBAAIoE,MAAOvE,EAAOE,YAAYE,GAA9B,mBAEEiE,KAAKrD,MAAMX,MAAM8D,KAAI,SAAAK,GACnB,OAAO,oBAAaD,MAAOvE,EAAOE,YAAYG,MAAMD,GAA7C,SAAkDqE,IAAOD,GAAIE,OAxJ3E,wBAwJuBF,WAKxB,gCAEI7C,OAAOC,KAAKyC,KAAKrD,MAAMjB,QAAQoE,KAAI,SAAArC,GACjC,OACE,+BACE,6BAAiBA,GAARA,GAEP,EAAKd,MAAMjB,OAAO+B,GAAOE,QAAQmC,KAAI,SAAAnC,GACnC,OAAO,oBAAIuC,MAAO,CAAEb,MAAO1B,EAAQ0B,OAAyDiB,MAAO3C,EAAQ6B,KAApG,SAA2G7B,EAAQ8B,YAAzE,IAAIT,MAAOuB,UAAY,IAAM5C,EAAQoB,WAJnFtB,WAcnB,sDAEF,uBACA,wBAAQ+C,QAASR,KAAKjD,SAAU0D,SAAUT,KAAKrD,MAAMK,QAArD,SAA+DgD,KAAKrD,MAAMK,QAAU,oBAAsB,gBAC1G,uBACA,qDAEE,uBAAO0D,KAAK,SAASlE,MAAOwD,KAAKrD,MAAML,YAAaqE,SAAUX,KAAK7D,0BAErE,wBAAQqE,QAASR,KAAKvD,iBAAtB,SAAyCuD,KAAKrD,MAAMC,WAAa,wBAA0B,kBAC3F,uBACA,wBAAQ4D,QAASR,KAAKxB,cAAtB,4BACA,8B,GAzKgBoC,aCZTC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.64b78574.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\n\nconst queueUrl = \"https://devsupport.cebroker.com/queuescount\";\nconst MASK = \"hh:mm:ss A DD/MM/YY\";\nconst QUEUE_DATA = \"QUEUE_DATA\";\n\nlet queues = {};\n\nconst styles = {\n  table: {\n    'overflowY': 'scroll'\n  },\n  tableHeader: {\n    tr: { 'minWidth': '280px', 'fontWeight': 'bold' },\n    td: { 'minWidth': '280px' },\n    dates: {\n      td: { 'minWidth': '110px', 'padding': '0 5px', 'width': '110px' }\n    }\n  }\n}\n\nclass QueueList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dates: [],\n      queues: {},\n      loading: false,\n      intervalSec: 30,\n      loadingInterval: false,\n      interval: null\n    };\n    this.loadData = this.loadData.bind(this);\n    this.handleIntervalChange = this.handleIntervalChange.bind(this);\n    this.loadDataInterval = this.loadDataInterval.bind(this);\n    this.deleteHistory = this.deleteHistory.bind(this);\n    this.loadDates = this.loadDates.bind(this);\n  }\n\n  getQueues(data) {\n    let processedData = data.matchAll(/<tr style='color: (.+?);.+?>.+?<td>(.+?)<\\/td>.+?<td>(.+?)<\\/td>.+?<\\/tr>/g);\n    //let date = data.match(/<strong>(.+?)<\\/strong>/i);\n    //let pDate = new moment(date[1], \"MM/DD/YYYY, HH:mm:SS A\").toDate().getTime();\n    let date = new Date();\n\n    Array.from(processedData).forEach(match => {\n\n      queues = this.state.queues;\n      let history = queues[match[2]]?.history || [];\n\n      let current = {\n        value: match[3],\n        color: match[1],\n        date\n      }\n\n      let prev = history.length > 0 ? history[0] : null;\n\n      if (prev) {\n        current.diff = current.value - prev.value;\n        if (prev.value > current.value) {\n          current.valueShow = `${current.value} (-)`;\n        } else if (prev.value < current.value) {\n          current.valueShow = `${current.value} (+)`;\n        } else {\n          current.valueShow = `${current.value} (=)`;\n        }\n      } else {\n        current.valueShow = current.value;\n        current.diff = 'N/D';\n      }\n\n      history.unshift(\n        current\n      );\n\n      this.loadDates(history);\n\n      queues[match[2]] = {\n        name: match[2],\n        history\n      };\n      this.setState({ queues });\n      localStorage.setItem(QUEUE_DATA, JSON.stringify(queues));\n    });\n  }\n\n  loadDates(history) {\n    let dates = history.map(q => {\n      return q.date;\n    });\n    this.setState({ dates });\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  handleIntervalChange = (event) => {\n    this.setState({ intervalSec: event.target.value });\n  }\n\n  loadDataInterval = (event) => {\n    let interval = this.state.interval;\n    if (this.state.loadingSeq) {\n      clearInterval(interval);\n    } else {\n      interval = setInterval(this.loadData, this.state.intervalSec * 1000);\n      this.setState({ interval });\n    }\n    this.setState({ loadingSeq: !this.state.loadingSeq });\n  }\n\n  loadData = () => {\n    this.setState({ loading: true });\n    let storage = localStorage.getItem(QUEUE_DATA);\n    if (storage) {\n      this.setState({\n        queues: JSON.parse(storage)\n      }, () => {\n        Object.keys(this.state.queues).forEach(queue => {\n          this.loadDates(this.state.queues[queue].history);\n        })\n      })\n\n    }\n    axios.get(queueUrl)\n      .then(res => {\n        this.getQueues(res.data.item[0].text, this.state.queues);\n        this.setState({ loading: false });\n      }).catch(err => {\n        console.error(err);\n        this.setState({ loading: false });\n      })\n  }\n\n  deleteHistory = () => {\n    localStorage.removeItem(QUEUE_DATA);\n    this.setState({\n      queues: {}\n    })\n    alert(\"History deleted!\");\n  }\n\n  render() {\n    return (\n      <div>\n        {Object.keys(this.state.queues).length > 0 ?\n          <table border='1' style={styles.table}>\n            <thead>\n              <tr style={styles.tableHeader.tr}>\n                <td style={styles.tableHeader.td}>Queue</td>\n                {\n                  this.state.dates.map(dt => {\n                    return <td key={dt} style={styles.tableHeader.dates.td}>{moment(dt).format(MASK)}</td>\n                  })\n                }\n              </tr>\n            </thead>\n            <tbody>\n              {\n                Object.keys(this.state.queues).map(queue => {\n                  return (\n                    <tr key={queue}>\n                      <td key={queue}>{queue}</td>\n                      {\n                        this.state.queues[queue].history.map(history => {\n                          return <td style={{ color: history.color }} key={new Date().getTime() + \"-\" + history.date} title={history.diff}>{history.valueShow}</td>\n                        })\n                      }\n                    </tr>\n                  );\n                })\n              }\n            </tbody>\n          </table>\n          :\n          <p>No data to display!!!</p>\n        }\n        <br />\n        <button onClick={this.loadData} disabled={this.state.loading}>{this.state.loading ? \"Loading Queues...\" : \"Load Queues\"}</button>\n        <br />\n        <label>\n          Interval (Sec.):\n          <input type=\"number\" value={this.state.intervalSec} onChange={this.handleIntervalChange} />\n        </label>\n        <button onClick={this.loadDataInterval}>{this.state.loadingSeq ? \"Stop loading Interval\" : \"Load Interval\"}</button>\n        <br />\n        <button onClick={this.deleteHistory}>Delete History</button>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default QueueList;","import './App.css';\nimport QueueList from './components/QueueList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QueueList></QueueList>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}